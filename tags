!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
;g	init.vim	/^nnoremap ;g :vsp<CR>$/;"	m
;vg	init.vim	/^nnoremap ;vg :sp<CR>$/;"	m
<Down>	init.vim	/^inoremap <Down>  <ESC>:echoe "Use j"<CR>$/;"	m
<Down>	init.vim	/^nnoremap <Down>  :echoe "Use j"<CR>$/;"	m
<F3>	init.vim	/^nnoremap <F3> :NERDTree<CR>$/;"	m
<Leader>	init.vim	/^map <Leader> <Plug>(easymotion-prefix)$/;"	m
<Leader>1	init.vim	/^nnoremap <Leader>1 1<c-w>w$/;"	m
<Leader>2	init.vim	/^nnoremap <Leader>2 2<c-w>w$/;"	m
<Leader>3	init.vim	/^nnoremap <Leader>3 3<c-w>w$/;"	m
<Leader>4	init.vim	/^nnoremap <Leader>4 4<c-w>w$/;"	m
<Leader>5	init.vim	/^nnoremap <Leader>5 5<c-w>w$/;"	m
<Leader>6	init.vim	/^nnoremap <Leader>6 6<c-w>w$/;"	m
<Leader>7	init.vim	/^nnoremap <Leader>7 7<c-w>w$/;"	m
<Leader>8	init.vim	/^nnoremap <Leader>8 8<c-w>w$/;"	m
<Leader>9	init.vim	/^nnoremap <Leader>9 9<c-w>w$/;"	m
<Leader>hl	init.vim	/^nnoremap <Leader>hl :nohls<CR>$/;"	m
<Left>	init.vim	/^inoremap <Left>  <ESC>:echoe "Use h"<CR>$/;"	m
<Left>	init.vim	/^nnoremap <Left>  :echoe "Use h"<CR>$/;"	m
<Right>	init.vim	/^inoremap <Right> <ESC>:echoe "Use l"<CR>$/;"	m
<Right>	init.vim	/^nnoremap <Right> :echoe "Use l"<CR>$/;"	m
<TAB>	init.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<Up>	init.vim	/^inoremap <Up>    <ESC>:echoe "Use k"<CR>$/;"	m
<Up>	init.vim	/^nnoremap <Up>    :echoe "Use k"<CR>$/;"	m
<c-b>	init.vim	/^imap <c-b> <c-o>h$/;"	m
<c-f>	init.vim	/^imap <c-f> <c-o>a$/;"	m
<c-j>	init.vim	/^nnoremap <c-j> :bprev<CR>$/;"	m
<c-k>	init.vim	/^nnoremap <c-k> :bnext<CR>$/;"	m
<c-l>	init.vim	/^imap <c-l> <Plug>(coc-snippets-expand)$/;"	m
<c-n>	init.vim	/^imap <c-n> <c-o>j$/;"	m
<c-p>	init.vim	/^imap <c-p> <c-o>k$/;"	m
<c-p>	init.vim	/^nmap <c-p> :Files<CR>$/;"	m
<f5>	init.vim	/^nnoremap <f5> :!ctags -R<CR>$/;"	m
<leader>bd	init.vim	/^noremap <leader>bd :bdelete<CR>$/;"	m
<leader>cl	init.vim	/^nmap <leader>cl Vgc$/;"	m
<leader>cl	init.vim	/^vmap <leader>cl gc$/;"	m
<leader>s	init.vim	/^nmap <leader>s :Rg<CR>$/;"	m
<tab>	init.vim	/^inoremap <tab> <c-r>=SkipPair()<CR>$/;"	m
AS_YOU_TYPE	config/ranger/commands_full.py	/^    AS_YOU_TYPE   = 't'$/;"	v	class:scout
AUTO_OPEN	config/ranger/commands_full.py	/^    AUTO_OPEN     = 'a'$/;"	v	class:scout
FILTER	config/ranger/commands_full.py	/^    FILTER        = 'f'$/;"	v	class:scout
H	init.vim	/^nnoremap H ^$/;"	m
H	init.vim	/^vnoremap H ^$/;"	m
IGNORE_CASE	config/ranger/commands_full.py	/^    IGNORE_CASE   = 'i'$/;"	v	class:scout
INVERT	config/ranger/commands_full.py	/^    INVERT        = 'v'$/;"	v	class:scout
KEEP_OPEN	config/ranger/commands_full.py	/^    KEEP_OPEN     = 'k'$/;"	v	class:scout
L	init.vim	/^nnoremap L \$$/;"	m
L	init.vim	/^vnoremap L \$$/;"	m
M.load	nvim/lua/plug_set/lualine.lua	/^function M.load()$/;"	f
M.make	nvim/lua/tools.lua	/^function M.make()$/;"	f
MARK	config/ranger/commands_full.py	/^    MARK          = 'm'$/;"	v	class:scout
OPEN_ON_ENTER	config/ranger/commands_full.py	/^    OPEN_ON_ENTER = 'e'$/;"	v	class:scout
PATH_RE_DQUOTED	config/ranger/commands_full.py	/^    PATH_RE_DQUOTED = re.compile(r'^setlocal\\s+path="(.*?)"')$/;"	v	class:setlocal
PATH_RE_SQUOTED	config/ranger/commands_full.py	/^    PATH_RE_SQUOTED = re.compile(r"^setlocal\\s+path='(.*?)'")$/;"	v	class:setlocal
PATH_RE_UNQUOTED	config/ranger/commands_full.py	/^    PATH_RE_UNQUOTED = re.compile(r'^path=(.*?)$')$/;"	v	class:setlocal
PERM_FILTER	config/ranger/commands_full.py	/^    PERM_FILTER   = 'p'$/;"	v	class:scout
Q	init.vim	/^nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.$/;"	m
SMART_CASE	config/ranger/commands_full.py	/^    SMART_CASE    = 's'$/;"	v	class:scout
SM_GLOB	config/ranger/commands_full.py	/^    SM_GLOB       = 'g'$/;"	v	class:scout
SM_LETTERSKIP	config/ranger/commands_full.py	/^    SM_LETTERSKIP = 'l'$/;"	v	class:scout
SM_REGEX	config/ranger/commands_full.py	/^    SM_REGEX      = 'r'$/;"	v	class:scout
SkipPair	init.vim	/^func SkipPair()$/;"	f
UNMARK	config/ranger/commands_full.py	/^    UNMARK        = 'M'$/;"	v	class:scout
WindowNumber	init.vim	/^function! WindowNumber(...)$/;"	f
__init__	config/ranger/commands_full.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:jump_non
__init__	config/ranger/commands_full.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:rename_append
__init__	config/ranger/commands_full.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:scout
_build_regex	config/ranger/commands_full.py	/^    def _build_regex(self):$/;"	m	class:scout
_command_name	config/ranger/commands_full.py	/^    _command_name = "meta"$/;"	v	class:prompt_metadata
_console_chain	config/ranger/commands_full.py	/^    _console_chain = None$/;"	v	class:prompt_metadata
_count	config/ranger/commands_full.py	/^    def _count(self, move=False, offset=0):$/;"	m	class:scout
_exit_no_work	config/ranger/commands_full.py	/^    def _exit_no_work(self):$/;"	m	class:quit
_exit_no_work	config/ranger/commands_full.py	/^    def _exit_no_work(self):$/;"	m	class:quitall
_fill_console	config/ranger/commands_full.py	/^    def _fill_console(self, key):$/;"	m	class:prompt_metadata
_get_app_flags_mode	config/ranger/commands_full.py	/^    def _get_app_flags_mode(self, string):  # pylint: disable=too-many-branches,too-many-statements$/;"	m	class:open_with
_is_app	config/ranger/commands_full.py	/^    def _is_app(self, arg):$/;"	m	class:open_with
_is_flags	config/ranger/commands_full.py	/^    def _is_flags(arg):$/;"	m	class:open_with
_is_mode	config/ranger/commands_full.py	/^    def _is_mode(arg):$/;"	m	class:open_with
_non	config/ranger/commands_full.py	/^    def _non(fobj, is_directory):$/;"	m	class:jump_non
_process_command_stack	config/ranger/commands_full.py	/^    def _process_command_stack(self):$/;"	m	class:prompt_metadata
_question_callback	config/ranger/commands_full.py	/^    def _question_callback(self, files, answer):$/;"	m	class:delete
_question_callback	config/ranger/commands_full.py	/^    def _question_callback(self, files, answer):$/;"	m	class:trash
_re_shift	config/ranger/commands_full.py	/^    def _re_shift(self, match):$/;"	m	class:setlocal
_tab_args	config/ranger/commands_full.py	/^    def _tab_args(self):$/;"	m	class:cd
_tab_fuzzy	config/ranger/commands_full.py	/^    def _tab_fuzzy(self, dest, dest_abs):$/;"	m	class:cd
_tab_fuzzy_match	config/ranger/commands_full.py	/^    def _tab_fuzzy_match(self, basepath, tokens):$/;"	m	class:cd
_tab_match	config/ranger/commands_full.py	/^    def _tab_match(self, path_user, path_file):$/;"	m	class:cd
_tab_normal	config/ranger/commands_full.py	/^    def _tab_normal(self, dest, dest_abs):$/;"	m	class:cd
_tab_paths	config/ranger/commands_full.py	/^    def _tab_paths(dest, dest_abs, ends_with_sep):$/;"	m	class:cd
alias	config/ranger/commands_full.py	/^class alias(Command):$/;"	c
allow_abbrev	config/ranger/commands_full.py	/^    allow_abbrev = False$/;"	v	class:delete
allow_abbrev	config/ranger/commands_full.py	/^    allow_abbrev = False$/;"	v	class:quit_bang
allow_abbrev	config/ranger/commands_full.py	/^    allow_abbrev = False$/;"	v	class:quitall_bang
allow_abbrev	config/ranger/commands_full.py	/^    allow_abbrev = False$/;"	v	class:trash
append_ul	plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
ask	plug.vim	/^function! s:ask(message, ...)$/;"	f
ask_no_interrupt	plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
assign_name	plug.vim	/^function! s:assign_name()$/;"	f
assoc	plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
bang	plug.vim	/^function! s:bang(cmd, ...)$/;"	f
bar	plug.vim	/^function! s:bar()$/;"	f
batchfile	plug.vim	/^  function! s:batchfile(cmd)$/;"	f
buf_set_keymap	nvim/lua/lsp.lua	/^  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end$/;"	f
buf_set_option	nvim/lua/lsp.lua	/^  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end$/;"	f
bulkrename	config/ranger/commands_full.py	/^class bulkrename(Command):$/;"	c
callback	config/ranger/commands_full.py	/^        def callback(answer):$/;"	f	function:help_.execute
cancel	config/ranger/commands_full.py	/^    def cancel(self):$/;"	m	class:scout
cd	config/ranger/commands_full.py	/^class cd(Command):$/;"	c
chain	config/ranger/commands_full.py	/^class chain(Command):$/;"	c
check_back_space	init.vim	/^function! s:check_back_space()abort$/;"	f
check_ruby	plug.vim	/^function! s:check_ruby()$/;"	f
checkout	plug.vim	/^function! s:checkout(spec)$/;"	f
chmod	config/ranger/commands_full.py	/^class chmod(Command):$/;"	c
chsh	plug.vim	/^function! s:chsh(swap)$/;"	f
clean	plug.vim	/^function! s:clean(force)$/;"	f
clipboards	config/ranger/commands_full.py	/^        def clipboards():$/;"	f	function:yank.execute
clock	nvim/lua/plug_set/lualine.lua	/^local function clock()$/;"	f
close_pane	plug.vim	/^function! s:close_pane()$/;"	f
cmap	config/ranger/commands_full.py	/^class cmap(map_):$/;"	c
compare_git_uri	plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
config	nvim/lua/install.lua	/^				config=function()$/;"	f
config	nvim/lua/install.lua	/^				config=function()require'nvim-tree'.setup{}end$/;"	f
console	config/ranger/commands_full.py	/^class console(Command):$/;"	c
context	config/ranger/commands_full.py	/^    context = 'browser'$/;"	v	class:alias
context	config/ranger/commands_full.py	/^    context = 'browser'$/;"	v	class:copymap
context	config/ranger/commands_full.py	/^    context = 'browser'$/;"	v	class:map_
context	config/ranger/commands_full.py	/^    context = 'browser'$/;"	v	class:unmap
context	config/ranger/commands_full.py	/^    context = 'console'$/;"	v	class:cmap
context	config/ranger/commands_full.py	/^    context = 'console'$/;"	v	class:copycmap
context	config/ranger/commands_full.py	/^    context = 'console'$/;"	v	class:uncmap
context	config/ranger/commands_full.py	/^    context = 'pager'$/;"	v	class:copypmap
context	config/ranger/commands_full.py	/^    context = 'pager'$/;"	v	class:pmap
context	config/ranger/commands_full.py	/^    context = 'pager'$/;"	v	class:unpmap
context	config/ranger/commands_full.py	/^    context = 'taskview'$/;"	v	class:copytmap
context	config/ranger/commands_full.py	/^    context = 'taskview'$/;"	v	class:tmap
context	config/ranger/commands_full.py	/^    context = 'taskview'$/;"	v	class:untmap
copy_buffer_filename	config/ranger/commands_full.py	/^    copy_buffer_filename = 'copy_buffer'$/;"	v	class:load_copy_buffer
copy_buffer_filename	config/ranger/commands_full.py	/^    copy_buffer_filename = 'copy_buffer'$/;"	v	class:save_copy_buffer
copycmap	config/ranger/commands_full.py	/^class copycmap(copymap):$/;"	c
copymap	config/ranger/commands_full.py	/^class copymap(Command):$/;"	c
copypmap	config/ranger/commands_full.py	/^class copypmap(copymap):$/;"	c
copytmap	config/ranger/commands_full.py	/^class copytmap(copymap):$/;"	c
cunmap	config/ranger/commands_full.py	/^class cunmap(uncmap):$/;"	c
default_linemode	config/ranger/commands_full.py	/^class default_linemode(Command):$/;"	c
default_value_completer	config/ranger/commands_full.py	/^            def default_value_completer():$/;"	f	function:set_.tab
define_commands	plug.vim	/^function! s:define_commands()$/;"	f
delete	config/ranger/commands_full.py	/^class delete(Command):$/;"	c
delete	plug.vim	/^function! s:delete(range, force)$/;"	f
delete_op	plug.vim	/^function! s:delete_op(type, ...)$/;"	f
df	init.vim	/^imap df <c-o>a$/;"	m
diff	plug.vim	/^function! s:diff()$/;"	f
dirpath	plug.vim	/^  function! s:dirpath(path)$/;"	f
do	plug.vim	/^function! s:do(pull, force, todo)$/;"	f
do_mark	config/ranger/commands_full.py	/^    do_mark = False$/;"	v	class:unmark_tag
do_mark	config/ranger/commands_full.py	/^    do_mark = True$/;"	v	class:mark_tag
doautocmd	plug.vim	/^function! s:doautocmd(...)$/;"	f
dobufread	plug.vim	/^function! s:dobufread(names)$/;"	f
echo	config/ranger/commands_full.py	/^class echo(Command):$/;"	c
edit	config/ranger/commands_full.py	/^class edit(Command):$/;"	c
err	plug.vim	/^function! s:err(msg)$/;"	f
esc	plug.vim	/^function! s:esc(path)$/;"	f
escape_macros_for_shell	config/ranger/commands_full.py	/^    escape_macros_for_shell = True$/;"	v	class:delete
escape_macros_for_shell	config/ranger/commands_full.py	/^    escape_macros_for_shell = True$/;"	v	class:shell
escape_macros_for_shell	config/ranger/commands_full.py	/^    escape_macros_for_shell = True$/;"	v	class:trash
escrtp	plug.vim	/^function! s:escrtp(path)$/;"	f
eval_	config/ranger/commands_full.py	/^class eval_(Command):$/;"	c
execute	config/ranger/commands.py	/^    def execute(self):$/;"	m	class:fzf_select
execute	config/ranger/commands.py	/^    def execute(self):$/;"	m	class:my_edit
execute	config/ranger/commands_full.py	/^    def execute(self):  # pylint: disable=too-many-branches$/;"	m	class:scout
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:alias
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:bulkrename
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:cd
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:chain
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:chmod
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:console
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:copymap
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:cunmap
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:default_linemode
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:delete
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:echo
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:edit
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:eval_
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:filter_inode_type
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:filter_stack
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:flat
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:grep
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:help_
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:jump_non
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:linemode
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:load_copy_buffer
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:map_
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:mark_tag
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:meta
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:mkdir
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:narrow
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:open_with
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:paste_ext
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:prompt_metadata
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:punmap
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:quit
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:quit_bang
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:quitall
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:quitall_bang
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:relink
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:rename
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:rename_append
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:reset_previews
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:save_copy_buffer
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:set_
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:setintag
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:setlocal
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:shell
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:stage
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:terminal
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:touch
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:trash
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:tunmap
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:unmap
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:unstage
execute	config/ranger/commands_full.py	/^    def execute(self):$/;"	m	class:yank
expand 	nvim/lua/lsp.lua	/^      expand = function(args)$/;"	f
extract_name	plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
filter_inode_type	config/ranger/commands_full.py	/^class filter_inode_type(Command):$/;"	c
filter_stack	config/ranger/commands_full.py	/^class filter_stack(Command):$/;"	c
find_name	plug.vim	/^function! s:find_name(lnum)$/;"	f
finish	plug.vim	/^function! s:finish(pull)$/;"	f
finish_bindings	plug.vim	/^function! s:finish_bindings()$/;"	f
flat	config/ranger/commands_full.py	/^class flat(Command):$/;"	c
format_git_log	plug.vim	/^function! s:format_git_log(line)$/;"	f
format_message	plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
fzf_select	config/ranger/commands.py	/^class fzf_select(Command):$/;"	c
g:Lf_ShortcutF	init.vim	/^let g:Lf_ShortcutF = '<c-p>'$/;"	v
g:airline#extensions#tabline#enabled	init.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline_powerline_fonts	init.vim	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_section_c	init.vim	/^let g:airline_section_c = ''$/;"	v
g:airline_section_y	init.vim	/^let g:airline_section_y = '%{strftime("%H:%M")}'$/;"	v
g:clever_f_across_no_line	init.vim	/^let g:clever_f_across_no_line=1$/;"	v
g:coc_snippet_next	init.vim	/^let g:coc_snippet_next='<tab>'$/;"	v
g:deoplete#enable_at_startup	init.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:fzf_layout	init.vim	/^let g:fzf_layout = {'down':'50%'}$/;"	v
g:fzf_preview_window	init.vim	/^let g:fzf_preview_window = ['right:50%','ctrl-\/']$/;"	v
g:loaded_plug	plug.vim	/^let g:loaded_plug = 1$/;"	v
g:plugs_order	plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:rainbow_active	init.vim	/^let g:rainbow_active=1$/;"	v
ga	init.vim	/^nmap ga <Plug>(EasyAlign)$/;"	m
ga	init.vim	/^vmap ga <Plug>(EasyAlign)$/;"	m
gd	init.vim	/^nmap gd :Rg <c-r><c-w><CR>$/;"	m
get_selection_attr	config/ranger/commands_full.py	/^    def get_selection_attr(self, attr):$/;"	m	class:yank
git_dir	plug.vim	/^function! s:git_dir(dir) abort$/;"	f
git_local_branch	plug.vim	/^function! s:git_local_branch(dir) abort$/;"	f
git_origin_branch	plug.vim	/^function! s:git_origin_branch(spec)$/;"	f
git_origin_url	plug.vim	/^function! s:git_origin_url(dir) abort$/;"	f
git_revision	plug.vim	/^function! s:git_revision(dir) abort$/;"	f
git_validate	plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
git_version_requirement	plug.vim	/^function! s:git_version_requirement(...)$/;"	f
glob	plug.vim	/^function! s:glob(from, pattern)$/;"	f
glob_dir	plug.vim	/^function! s:glob_dir(path)$/;"	f
grep	config/ranger/commands_full.py	/^class grep(Command):$/;"	c
handle_extension	config/ranger/scope.sh	/^handle_extension() {$/;"	f
handle_fallback	config/ranger/scope.sh	/^handle_fallback() {$/;"	f
handle_image	config/ranger/scope.sh	/^handle_image() {$/;"	f
handle_mime	config/ranger/scope.sh	/^handle_mime() {$/;"	f
hash_match	plug.vim	/^function! s:hash_match(a, b)$/;"	f
help_	config/ranger/commands_full.py	/^class help_(Command):$/;"	c
infer_properties	plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
install	plug.vim	/^function! s:install(force, names)$/;"	f
is_directory_with_files	config/ranger/commands_full.py	/^        def is_directory_with_files(path):$/;"	f	function:delete.execute
is_directory_with_files	config/ranger/commands_full.py	/^        def is_directory_with_files(path):$/;"	f	function:trash.execute
is_local_plug	plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
is_managed	plug.vim	/^function! s:is_managed(name)$/;"	f
is_powershell	plug.vim	/^function! s:is_powershell(shell)$/;"	f
is_preview_window_open	plug.vim	/^function! s:is_preview_window_open()$/;"	f
is_updated	plug.vim	/^function! s:is_updated(dir)$/;"	f
isabsolute	plug.vim	/^function! s:isabsolute(dir) abort$/;"	f
jk	init.vim	/^imap jk <esc>:w<cr>$/;"	m
job_abort	plug.vim	/^function! s:job_abort()$/;"	f
job_cb	plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
job_exit_cb	plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
job_out_cb	plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
jump_non	config/ranger/commands_full.py	/^class jump_non(Command):$/;"	c
last_non_empty_line	plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
lastline	plug.vim	/^function! s:lastline(msg)$/;"	f
lazy	plug.vim	/^function! s:lazy(plug, opt)$/;"	f
linemode	config/ranger/commands_full.py	/^class linemode(default_linemode):$/;"	c
lines	plug.vim	/^function! s:lines(msg)$/;"	f
load_copy_buffer	config/ranger/commands_full.py	/^class load_copy_buffer(Command):$/;"	c
load_plugin	plug.vim	/^function! s:load_plugin(spec)$/;"	f
loaded_names	plug.vim	/^function! s:loaded_names()$/;"	f
local on_attach 	nvim/lua/lsp.lua	/^local on_attach = function(client, bufnr)$/;"	f
lod	plug.vim	/^function! s:lod(names, types, ...)$/;"	f
lod_cmd	plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
lod_ft	plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
lod_map	plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
log	plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
log4	plug.vim	/^function! s:log4(name, msg)$/;"	f
logpos	plug.vim	/^function! s:logpos(name)$/;"	f
lpad	plug.vim	/^function! s:lpad(str, len)$/;"	f
lsp_pregress	nvim/lua/plug_set/lualine.lua	/^local function lsp_pregress()$/;"	f
make_safe_path	config/ranger/commands_full.py	/^    def make_safe_path(dst):$/;"	m	class:paste_ext
map_	config/ranger/commands_full.py	/^class map_(Command):$/;"	c
mapleader	init.vim	/^let mapleader=" "$/;"	v
mark_tag	config/ranger/commands_full.py	/^class mark_tag(Command):$/;"	c
meta	config/ranger/commands_full.py	/^class meta(prompt_metadata):$/;"	c
mkdir	config/ranger/commands_full.py	/^class mkdir(Command):$/;"	c
modes	config/ranger/commands_full.py	/^    modes = {$/;"	v	class:yank
my_edit	config/ranger/commands.py	/^class my_edit(Command):$/;"	c
name	config/ranger/commands_full.py	/^    name = 'eval'$/;"	v	class:eval_
name	config/ranger/commands_full.py	/^    name = 'help'$/;"	v	class:help_
name	config/ranger/commands_full.py	/^    name = 'map'$/;"	v	class:map_
name	config/ranger/commands_full.py	/^    name = 'quit!'$/;"	v	class:quit_bang
name	config/ranger/commands_full.py	/^    name = 'quitall!'$/;"	v	class:quitall_bang
name	config/ranger/commands_full.py	/^    name = 'set'  # don't override the builtin set class$/;"	v	class:set_
names	plug.vim	/^function! s:names(...)$/;"	f
narrow	config/ranger/commands_full.py	/^class narrow(Command):$/;"	c
new_window	plug.vim	/^function! s:new_window()$/;"	f
nvim_cb	plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
open_with	config/ranger/commands_full.py	/^class open_with(Command):$/;"	c
parse_options	plug.vim	/^function! s:parse_options(arg)$/;"	f
paste_ext	config/ranger/commands_full.py	/^class paste_ext(Command):$/;"	c
path	plug.vim	/^  function! s:path(path)$/;"	f
plug#	plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	plug.vim	/^function! plug#end()$/;"	f
plug#helptags	plug.vim	/^function! plug#helptags()$/;"	f
plug#load	plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
plug_call	plug.vim	/^  function! s:plug_call(fn, ...)$/;"	f
plug_expand	plug.vim	/^function! s:plug_expand(fmt)$/;"	f
plug_fnamemodify	plug.vim	/^function! s:plug_fnamemodify(fname, mods)$/;"	f
plug_getcwd	plug.vim	/^function! s:plug_getcwd()$/;"	f
plug_tempname	plug.vim	/^function! s:plug_tempname()$/;"	f
plug_window_exists	plug.vim	/^function! s:plug_window_exists()$/;"	f
pmap	config/ranger/commands_full.py	/^class pmap(map_):$/;"	c
prepare	plug.vim	/^function! s:prepare(...)$/;"	f
preview_commit	plug.vim	/^function! s:preview_commit()$/;"	f
progress_bar	plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
progress_opt	plug.vim	/^function! s:progress_opt(base)$/;"	f
prompt_metadata	config/ranger/commands_full.py	/^class prompt_metadata(Command):$/;"	c
punmap	config/ranger/commands_full.py	/^class punmap(unpmap):$/;"	c
quick	config/ranger/commands_full.py	/^    def quick(self):$/;"	m	class:scout
quit	config/ranger/commands_full.py	/^class quit(Command):  # pylint: disable=redefined-builtin$/;"	c
quit_bang	config/ranger/commands_full.py	/^class quit_bang(Command):$/;"	c
quitall	config/ranger/commands_full.py	/^class quitall(Command):$/;"	c
quitall_bang	config/ranger/commands_full.py	/^class quitall_bang(Command):$/;"	c
reap	plug.vim	/^function! s:reap(name)$/;"	f
regress_bar	plug.vim	/^function! s:regress_bar()$/;"	f
relink	config/ranger/commands_full.py	/^class relink(Command):$/;"	c
reload_plugins	plug.vim	/^function! s:reload_plugins()$/;"	f
remove_rtp	plug.vim	/^function! s:remove_rtp()$/;"	f
remove_triggers	plug.vim	/^function! s:remove_triggers(name)$/;"	f
rename	config/ranger/commands_full.py	/^class rename(Command):$/;"	c
rename_append	config/ranger/commands_full.py	/^class rename_append(Command):$/;"	c
reorg_rtp	plug.vim	/^function! s:reorg_rtp()$/;"	f
reset_previews	config/ranger/commands_full.py	/^class reset_previews(Command):$/;"	c
resolve_macros	config/ranger/commands_full.py	/^    resolve_macros = False$/;"	v	class:alias
resolve_macros	config/ranger/commands_full.py	/^    resolve_macros = False$/;"	v	class:chain
resolve_macros	config/ranger/commands_full.py	/^    resolve_macros = False$/;"	v	class:eval_
resolve_macros	config/ranger/commands_full.py	/^    resolve_macros = False$/;"	v	class:map_
retry	plug.vim	/^function! s:retry()$/;"	f
revert	plug.vim	/^function! s:revert()$/;"	f
rm_rf	plug.vim	/^function! s:rm_rf(dir)$/;"	f
rtp	plug.vim	/^function! s:rtp(spec)$/;"	f
s:TYPE	plug.vim	/^let s:TYPE = {$/;"	v
s:base_spec	plug.vim	/^let s:base_spec = { 'branch': '', 'frozen': 0 }$/;"	v
s:cpo_save	plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:first_rtp	plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:is_win	plug.vim	/^let s:is_win = has('win32')$/;"	v
s:last_rtp	plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:loaded	plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:mac_gui	plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:me	plug.vim	/^  let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:nvim	plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:plug_buf	plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:triggers	plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:vim8	plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
save_copy_buffer	config/ranger/commands_full.py	/^class save_copy_buffer(Command):$/;"	c
scout	config/ranger/commands_full.py	/^class scout(Command):$/;"	c
section	plug.vim	/^function! s:section(flags)$/;"	f
set_	config/ranger/commands_full.py	/^class set_(Command):$/;"	c
setintag	config/ranger/commands_full.py	/^class setintag(set_):$/;"	c
setlocal	config/ranger/commands_full.py	/^class setlocal(set_):$/;"	c
shell	config/ranger/commands_full.py	/^class shell(Command):$/;"	c
shellesc_cmd	plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
shellesc_ps1	plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
shellesc_sh	plug.vim	/^function! s:shellesc_sh(arg)$/;"	f
size 	nvim/lua/plug_set/toggleterm.lua	/^  size = function(term)$/;"	f
snapshot	plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
source	plug.vim	/^function! s:source(from, ...)$/;"	f
spawn	plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
split_rtp	plug.vim	/^function! s:split_rtp()$/;"	f
stage	config/ranger/commands_full.py	/^class stage(Command):$/;"	c
status	plug.vim	/^function! s:status()$/;"	f
status_load	plug.vim	/^function! s:status_load(lnum)$/;"	f
status_update	plug.vim	/^function! s:status_update() range$/;"	f
switch_in	plug.vim	/^function! s:switch_in()$/;"	f
switch_out	plug.vim	/^function! s:switch_out(...)$/;"	f
syntax	plug.vim	/^function! s:syntax()$/;"	f
system	plug.vim	/^function! s:system(cmd, ...)$/;"	f
system_chomp	plug.vim	/^function! s:system_chomp(...)$/;"	f
tab	config/ranger/commands.py	/^    def tab(self, tabnum):$/;"	m	class:my_edit
tab	config/ranger/commands_full.py	/^    def tab(self, tabnum):  # pylint: disable=too-many-return-statements$/;"	m	class:set_
tab	config/ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:cd
tab	config/ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:default_linemode
tab	config/ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:delete
tab	config/ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:edit
tab	config/ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:meta
tab	config/ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:mkdir
tab	config/ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:open_with
tab	config/ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:relink
tab	config/ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:rename
tab	config/ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:scout
tab	config/ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:shell
tab	config/ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:touch
tab	config/ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:trash
tab	config/ranger/commands_full.py	/^    def tab(self, tabnum):$/;"	m	class:yank
terminal	config/ranger/commands_full.py	/^class terminal(Command):$/;"	c
tick	plug.vim	/^function! s:tick()$/;"	f
tmap	config/ranger/commands_full.py	/^class tmap(map_):$/;"	c
to_a	plug.vim	/^function! s:to_a(v)$/;"	f
to_s	plug.vim	/^function! s:to_s(v)$/;"	f
touch	config/ranger/commands_full.py	/^class touch(Command):$/;"	c
trash	config/ranger/commands_full.py	/^class trash(Command):$/;"	c
trim	plug.vim	/^function! s:trim(str)$/;"	f
tunmap	config/ranger/commands_full.py	/^class tunmap(untmap):$/;"	c
uncmap	config/ranger/commands_full.py	/^class uncmap(unmap):$/;"	c
unmap	config/ranger/commands_full.py	/^class unmap(Command):$/;"	c
unmark_tag	config/ranger/commands_full.py	/^class unmark_tag(mark_tag):$/;"	c
unpmap	config/ranger/commands_full.py	/^class unpmap(unmap):$/;"	c
unstage	config/ranger/commands_full.py	/^class unstage(Command):$/;"	c
untmap	config/ranger/commands_full.py	/^class untmap(unmap):$/;"	c
update	plug.vim	/^function! s:update(force, names)$/;"	f
update_finish	plug.vim	/^function! s:update_finish()$/;"	f
update_impl	plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
update_python	plug.vim	/^function! s:update_python()$/;"	f
update_ruby	plug.vim	/^function! s:update_ruby()$/;"	f
update_vim	plug.vim	/^function! s:update_vim()$/;"	f
upgrade	plug.vim	/^function! s:upgrade()$/;"	f
upgrade_specs	plug.vim	/^function! s:upgrade_specs()$/;"	f
version_requirement	plug.vim	/^function! s:version_requirement(val, min)$/;"	f
warn	plug.vim	/^function! s:warn(cmd, msg)$/;"	f
winnr	nvim/lua/plug_set/lualine.lua	/^local function winnr()$/;"	f
with_cd	plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
wq	init.vim	/^nnoremap wq :wa<CR>:q<CR>$/;"	m
wrap_cmds	plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
yank	config/ranger/commands_full.py	/^class yank(Command):$/;"	c
